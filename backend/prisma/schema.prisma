// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      UserRole @default(CUSTOMER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  customer  Customer?
  barber    Barber?

  @@map("users")
}

model Customer {
  id          String   @id @default(uuid())
  userId      String   @unique
  birthDate   DateTime
  hasAllergy  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id])
  schedules   Schedule[]

  @@map("customers")
}

model Barber {
  id        String   @id @default(uuid())
  userId    String   @unique
  specialty String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id])
  schedules Schedule[]

  @@map("barbers")
}

model Service {
  id          String       @id @default(uuid())
  name        String
  description String?
  price       Decimal
  duration    Int      // duração em minutos
  type        ServiceType? // tipo do serviço
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  schedules   ScheduleService[]

  @@map("services")
}

model Schedule {
  id          String          @id @default(uuid())
  customerId  String
  barberId    String
  date        DateTime
  status      ScheduleStatus  @default(PENDING)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  customer    Customer        @relation(fields: [customerId], references: [id])
  barber      Barber         @relation(fields: [barberId], references: [id])
  services    ScheduleService[]

  @@map("schedules")
}

model ScheduleService {
  scheduleId  String
  serviceId   String
  price       Decimal   // preço no momento do agendamento

  schedule    Schedule  @relation(fields: [scheduleId], references: [id])
  service     Service   @relation(fields: [serviceId], references: [id])

  @@id([scheduleId, serviceId])
  @@map("schedule_services")
}

enum UserRole {
  ADMIN
  BARBER
  CUSTOMER
}

enum ServiceType {
  HAIRCUT
  BEARD
  COMBO
  OTHER
}

enum ScheduleStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
} 